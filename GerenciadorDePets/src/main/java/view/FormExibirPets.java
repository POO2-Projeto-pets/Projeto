/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import controller.Conexao;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Image;
import java.io.File;
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Date;
import java.time.LocalDate;
import java.time.Period;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

/**
 *
 * @author Pedro
 */
public class FormExibirPets extends javax.swing.JFrame {
    private JPanel painelCards;
    private static FormExibirPets gerFormExibirPets;
    static Connection con = null;
    static String driver = "org.postgresql.Driver";
    
    /**
     * Creates new form FormExibirPets
     */
    public FormExibirPets() {
//        initComponents();
        setTitle("Pets para Adoção");
        setSize(640, 600);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        painelCards = new JPanel();
        painelCards.setLayout(new GridLayout(0, 1, 10, 10)); // Vários cards verticalmente
        painelCards.setPreferredSize(new Dimension(600, painelCards.getPreferredSize().height));

        JScrollPane scrollPane = new JScrollPane(painelCards);
        scrollPane.getVerticalScrollBar().setUnitIncrement(20);

        add(scrollPane);

//        cadastrarPetsAutomaticamente();
        carregarPetsDoBanco();

        setVisible(true);
    }

    public static FormExibirPets Gen(){
        if(gerFormExibirPets == null){
            gerFormExibirPets = new FormExibirPets();
        }
        return gerFormExibirPets;
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 640, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 783, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormExibirPets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormExibirPets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormExibirPets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormExibirPets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormExibirPets().setVisible(true);
            }
        });
        
        
    }

//    public static void cadastrarPetsAutomaticamente() {
//        String url = "jdbc:postgresql://localhost:5432/Teste_Imagem";
//        String user = "postgres";
//        String senha = "123123123";
//
//        // Caminhos das imagens dos pets
//        String[] caminhos = {
//            "C:/Users/Pedro/OneDrive/Área de Trabalho/cachorro1.jpg",
//            "C:/Users/Pedro/OneDrive/Área de Trabalho/cachorro2.jpg",
//            "C:/Users/Pedro/OneDrive/Área de Trabalho/cachorro3.jpg"
//        };
//
//        // Dados dos pets
//        String[][] dados = {
//            {"Thor", "Golden Retriever", "2020-05-10", "Macho", "Corre bem, dócil", "Cachorro"},
//            {"Luna", "Siamesa", "2021-03-15", "Femea", "Escala móveis, ronrona", "Gato"},
//            {"Spike", "Poodle", "2019-11-01", "Macho", "Late muito, é fiel", "Cachorro"}
//        };
//
//        try (Connection con = DriverManager.getConnection(url, user, senha)) {
//            String sql = "INSERT INTO pet (user_id, can_id, foto, nome, raca, datadenascimento, genero, habilidades, especie, pet_id) " +
//                         "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
//
//            PreparedStatement ps = con.prepareStatement(sql);
//
//            for (int i = 0; i < 3; i++) {
//                File imagem = new File(caminhos[i]);
//                FileInputStream fis = new FileInputStream(imagem);
//
//                ps.setInt(1, 1); // user_id fictício
//                ps.setInt(2, 1); // can_id fictício
//                ps.setBinaryStream(3, fis, (int) imagem.length());
//                ps.setString(4, dados[i][0]); // nome
//                ps.setString(5, dados[i][1]); // raca
//                ps.setDate(6, java.sql.Date.valueOf(dados[i][2])); // dataNascimento
//                ps.setString(7, dados[i][3]); // genero
//                ps.setString(8, dados[i][4]); // habilidades
//                ps.setString(9, dados[i][5]); // especie
//                ps.setInt(10, i);
//                ps.executeUpdate();
//                fis.close();
//            }
//
//            ps.close();
//            System.out.println("3 pets cadastrados com sucesso!");
//
//        } catch (Exception e) {
//            e.printStackTrace();
//            System.err.println("Erro ao cadastrar os pets: " + e.getMessage());
//        }
//    }
    
    public void carregarPetsDoBanco() {
        String nome;
        String genero;
        Date dataNascimento;
        LocalDate nascimento;
        LocalDate hoje;
        int idade;
        byte[] imagemBytes;
        ImageIcon imagem = null;
        
        
        String sql = "SELECT nome, raca, dataNascimento, genero, habilidades, especie, foto FROM pet";

        try {
            Class.forName(driver);
            con = Conexao.getCon();
            
            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                nome = rs.getString("nome");
                
                // Formatando data de nascimento para exibir a idade do pet (anos)
                dataNascimento = rs.getDate("dataNascimento");
                nascimento = dataNascimento.toLocalDate();
                hoje = LocalDate.now();
                idade = Period.between(nascimento, hoje).getYears();
                
                
                genero = rs.getString("genero");
                imagemBytes = rs.getBytes("foto");

                imagem = null;
                if (imagemBytes != null) {
                    ImageIcon original = new ImageIcon(imagemBytes);
                    Image img = original.getImage().getScaledInstance(200, 200, Image.SCALE_SMOOTH);
                    imagem = new ImageIcon(img);
                }

                JPanel card = criarCard(nome, idade, genero, imagem);
                painelCards.add(card);
            }

            painelCards.revalidate();
            painelCards.repaint();

            rs.close();
            ps.close();
            con.close();
        } catch (SQLException | ClassNotFoundException e) {
            JOptionPane.showMessageDialog(this, "Erro ao acessar o banco: " + e.getMessage());
        }
    }

    private JPanel criarCard(String nome, int idade, String genero, ImageIcon imagem) {
        JPanel card = new JPanel();
        card.setPreferredSize(new Dimension(600, 150));
        card.setBorder(BorderFactory.createLineBorder(Color.GRAY));
        card.setLayout(new BorderLayout(10, 10));   

        // Imagem à esquerda
        JLabel labelImagem = new JLabel();
        labelImagem.setPreferredSize(new Dimension(220, 220));
        labelImagem.setHorizontalAlignment(JLabel.CENTER);
        labelImagem.setVerticalAlignment(JLabel.CENTER);
        labelImagem.setIcon(imagem != null ? imagem : new ImageIcon()); // imagem padrão se quiser

        // Painel para as informações com labels estilizados
        JPanel painelInfo = new JPanel();
        painelInfo.setLayout(new GridLayout(3, 1));
        painelInfo.setOpaque(false); // fundo transparente

        Font fonteNegrito = new Font("Arial", Font.BOLD, 16);
        Font fonteNormal = new Font("Arial", Font.PLAIN, 16);

        // Criar labels com HTML para negrito nos títulos
        JLabel labelNome = new JLabel("<html><b>Nome:</b> " + nome + "</html>");
        labelNome.setFont(fonteNormal);

        JLabel labelData = new JLabel("<html><b>Idade:</b> " + idade + "</html>");
        labelData.setFont(fonteNormal);

        JLabel labelGenero = new JLabel("<html><b>Gênero:</b> " + genero + "</html>");
        labelGenero.setFont(fonteNormal);

        // Adiciona os labels ao painel de info
        painelInfo.add(labelNome);
        painelInfo.add(labelData);
        painelInfo.add(labelGenero);

        // Botão Adotar
        JButton botaoAdotar = new JButton("Adotar");
        botaoAdotar.setFont(new Font("Arial", Font.BOLD, 16));
        botaoAdotar.addActionListener(e ->
            JOptionPane.showMessageDialog(card, "Proposta de adoção enviada! ")
        );

        // Painel direito: informações + botão
        JPanel painelDireito = new JPanel(new BorderLayout(10, 10));
        painelDireito.setOpaque(false);
        painelDireito.add(painelInfo, BorderLayout.CENTER);
        painelDireito.add(botaoAdotar, BorderLayout.SOUTH);

        // Adiciona imagem e painel direito ao card
        card.add(labelImagem, BorderLayout.WEST);
        card.add(painelDireito, BorderLayout.CENTER);

        return card;
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
