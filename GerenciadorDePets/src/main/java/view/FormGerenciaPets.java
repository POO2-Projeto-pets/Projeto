//Leonardo Silva e Cruz a2304805

package view;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Leonardo S. Cruz
 */
public class FormGerenciaPets extends javax.swing.JFrame{

    public int alterar(int i){return 0;}

    private static FormGerenciaPets gerPets;
    
    private FormGerenciaPets() {
        initComponents();
        hideAll();
    }
    
    public static FormGerenciaPets GenGerenciaPets(){ //3º passo
        if(gerPets == null){
            gerPets = new FormGerenciaPets();
        }
        return gerPets;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selectionOptionGroup = new javax.swing.ButtonGroup();
        togButAlterar = new javax.swing.JToggleButton();
        togButExcluir = new javax.swing.JToggleButton();
        jButton1 = new javax.swing.JButton();
        lblMarca = new javax.swing.JLabel();
        lblModelo = new javax.swing.JLabel();
        butLimpar = new javax.swing.JButton();
        txtfieldModelo = new javax.swing.JTextField();
        butFechar = new javax.swing.JButton();
        txtfieldMarca = new javax.swing.JTextField();
        togButInserir = new javax.swing.JToggleButton();
        infoPanel = new javax.swing.JPanel();
        butExcluir = new javax.swing.JButton();
        butAplicar = new javax.swing.JButton();
        butInserir = new javax.swing.JButton();
        lblTypeSlotProc = new javax.swing.JLabel();
        txtfieldTypeSlotProc = new javax.swing.JTextField();
        lblPotencia = new javax.swing.JLabel();
        txtfieldPotencia = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        lblQtdSlotMem = new javax.swing.JLabel();
        txtfieldQtdSlotMem = new javax.swing.JTextField();
        lblTypeSlotMem = new javax.swing.JLabel();
        txtfieldTypeSlotMem = new javax.swing.JTextField();
        lblMaxMem = new javax.swing.JLabel();
        txtfieldMaxMem = new javax.swing.JTextField();
        txtfieldForma = new javax.swing.JTextField();
        lblTypeSlotProc1 = new javax.swing.JLabel();
        txtfieldQtdSlotSata = new javax.swing.JTextField();
        lblQtdSlotSata = new javax.swing.JLabel();
        togButConsultar = new javax.swing.JToggleButton();
        lblChipset = new javax.swing.JLabel();
        txtfieldChipset = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Gerenciamento Placa Mãe");

        selectionOptionGroup.add(togButAlterar);
        togButAlterar.setText("Alterar");
        togButAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                togButAlterarActionPerformed(evt);
            }
        });

        selectionOptionGroup.add(togButExcluir);
        togButExcluir.setText("Excluir");
        togButExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                togButExcluirActionPerformed(evt);
            }
        });

        jButton1.setText("Lista Completa");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        lblMarca.setText("Nome");
        lblMarca.setToolTipText("");
        lblMarca.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        lblModelo.setText("Modelo");
        lblModelo.setToolTipText("");
        lblModelo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        butLimpar.setText("Limpar");
        butLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butLimparActionPerformed(evt);
            }
        });

        butFechar.setBackground(new java.awt.Color(255, 204, 204));
        butFechar.setText("Fechar");
        butFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butFecharActionPerformed(evt);
            }
        });

        txtfieldMarca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtfieldMarcaActionPerformed(evt);
            }
        });

        selectionOptionGroup.add(togButInserir);
        togButInserir.setText("Inserir");
        togButInserir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                togButInserirActionPerformed(evt);
            }
        });

        infoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Informations"));

        butExcluir.setBackground(new java.awt.Color(255, 204, 204));
        butExcluir.setText("Excluir");
        butExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butExcluirActionPerformed(evt);
            }
        });

        butAplicar.setText("Aplicar");
        butAplicar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butAplicarActionPerformed(evt);
            }
        });

        butInserir.setText("Inserir");
        butInserir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butInserirActionPerformed(evt);
            }
        });

        lblTypeSlotProc.setText("Slot Proc:");

        txtfieldTypeSlotProc.setEnabled(false);
        txtfieldTypeSlotProc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtfieldTypeSlotProcActionPerformed(evt);
            }
        });

        lblPotencia.setText("Potência:");

        txtfieldPotencia.setEnabled(false);
        txtfieldPotencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtfieldPotenciaActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Memória"));

        lblQtdSlotMem.setText("Quantidade Slots:");

        txtfieldQtdSlotMem.setEnabled(false);
        txtfieldQtdSlotMem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtfieldQtdSlotMemActionPerformed(evt);
            }
        });

        lblTypeSlotMem.setText("Tipo:");

        txtfieldTypeSlotMem.setEnabled(false);
        txtfieldTypeSlotMem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtfieldTypeSlotMemActionPerformed(evt);
            }
        });

        lblMaxMem.setText("Memória Máx.:");

        txtfieldMaxMem.setEnabled(false);
        txtfieldMaxMem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtfieldMaxMemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblQtdSlotMem)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtfieldQtdSlotMem, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblTypeSlotMem)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtfieldTypeSlotMem, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMaxMem)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtfieldMaxMem, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblQtdSlotMem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtfieldQtdSlotMem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTypeSlotMem)
                    .addComponent(txtfieldTypeSlotMem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMaxMem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtfieldMaxMem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        txtfieldForma.setEnabled(false);
        txtfieldForma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtfieldFormaActionPerformed(evt);
            }
        });

        lblTypeSlotProc1.setText("Formato:");

        txtfieldQtdSlotSata.setEnabled(false);
        txtfieldQtdSlotSata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtfieldQtdSlotSataActionPerformed(evt);
            }
        });

        lblQtdSlotSata.setText("Sata(s):");

        javax.swing.GroupLayout infoPanelLayout = new javax.swing.GroupLayout(infoPanel);
        infoPanel.setLayout(infoPanelLayout);
        infoPanelLayout.setHorizontalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addComponent(lblPotencia)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtfieldPotencia, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblTypeSlotProc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtfieldTypeSlotProc, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblTypeSlotProc1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtfieldForma, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblQtdSlotSata)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtfieldQtdSlotSata, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, infoPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(butInserir, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(butAplicar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(butExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        infoPanelLayout.setVerticalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblQtdSlotSata, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtfieldQtdSlotSata, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblTypeSlotProc1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtfieldForma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtfieldPotencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblPotencia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblTypeSlotProc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtfieldTypeSlotProc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(218, 218, 218)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(butExcluir)
                    .addComponent(butAplicar)
                    .addComponent(butInserir))
                .addContainerGap())
        );

        selectionOptionGroup.add(togButConsultar);
        togButConsultar.setText("Consultar");
        togButConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                togButConsultarActionPerformed(evt);
            }
        });

        lblChipset.setText("Chipset:");

        txtfieldChipset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtfieldChipsetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(butFechar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lblModelo, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                                .addComponent(lblMarca, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(lblChipset))
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtfieldChipset)
                            .addComponent(txtfieldModelo)
                            .addComponent(txtfieldMarca))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(butLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(togButInserir, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(togButConsultar, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(togButAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(togButExcluir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(infoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblMarca)
                            .addComponent(txtfieldMarca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblModelo)
                            .addComponent(txtfieldModelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtfieldChipset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblChipset)))
                    .addComponent(butLimpar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(togButInserir)
                    .addComponent(togButConsultar)
                    .addComponent(togButAlterar)
                    .addComponent(togButExcluir))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(infoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(butFechar)
                    .addComponent(jButton1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void togButAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_togButAlterarActionPerformed
        //alterar(0);
    }//GEN-LAST:event_togButAlterarActionPerformed

    private void togButExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_togButExcluirActionPerformed
        excluir(0);
    }//GEN-LAST:event_togButExcluirActionPerformed

    //Sobrescrita
    public void excluir(int state){
        hideAll();
        limparCampos(2);
        toUpperCase();
        if(txtfieldMarca.getText().isBlank()||txtfieldModelo.getText().isBlank()||txtfieldChipset.getText().isBlank()){
            limparCampos(2);
            JOptionPane.showMessageDialog(null, "Campo(s) em branco", "Erro", JOptionPane.ERROR_MESSAGE);
            selectionOptionGroup.clearSelection();
        }
        else if(/*checkInfo()==*/false){
            limparCampos(2);
            JOptionPane.showMessageDialog(null, "Dados não encontrados", "Erro", JOptionPane.ERROR_MESSAGE);
            selectionOptionGroup.clearSelection();
        }
        /*
        else{
            unhideExcluir(true);
            PlacaMae pm = new PlacaMae();
            pm.setMarca(txtfieldMarca.getText());
            pm.setModelo(txtfieldModelo.getText());
            pm.setChipset(txtfieldChipset.getText());
            txtfieldPotencia.setText(""+bd().consPlacaMaeMarcaModeloChipset(pm).getPotencia());
            txtfieldTypeSlotProc.setText(""+bd().consPlacaMaeMarcaModeloChipset(pm).getTypeSlotProc());
            txtfieldQtdSlotMem.setText(""+bd().consPlacaMaeMarcaModeloChipset(pm).getQtdSlotMem());
            txtfieldTypeSlotMem.setText(""+bd().consPlacaMaeMarcaModeloChipset(pm).getTypeSlotMem());
            txtfieldMaxMem.setText(""+bd().consPlacaMaeMarcaModeloChipset(pm).getMaxMem());
            txtfieldQtdSlotSata.setText(""+bd().consPlacaMaeMarcaModeloChipset(pm).getQtdSlotSata());
            txtfieldForma.setText(""+bd().consPlacaMaeMarcaModeloChipset(pm).getForma());
            DefaultTableModel model = (DefaultTableModel)TabelaM2.getModel();
            painelTabs.setEnabled(true);
            for(M2Slot m2s : bd().consPlacaMaeMarcaModeloChipset(pm).getM2SlotList()){
                model.addRow(new Object[]{m2s.getType(),m2s.getGen(),m2s.getLines(),m2s.getSlotSize()});
            }
            model = (DefaultTableModel)TabelaPCI.getModel();
            for(int i = (model.getRowCount()) -1; i >=0; i--){
               model.removeRow(i); 
            }
            for(PCISlot pci : bd().consPlacaMaeMarcaModeloChipset(pm).getPCISlotList()){
                model.addRow(new Object[]{pci.getGen(),pci.getLines(),pci.getSlotSize()});
            }
            if(state == 1){
                if(JOptionPane.showConfirmDialog(null,"Deseja realmente excluir?","Confirmação de Exclusão",JOptionPane.YES_NO_OPTION) == 0){
                    bd().deltPlacaMaeMarcaModeloChipset(pm);
                    if(bd().consPlacaMaeMarcaModeloChipset(pm)==null){
                        JOptionPane.showMessageDialog(null, "Dados excluidos com sucesso", "Sucesso", JOptionPane.PLAIN_MESSAGE);
                        hideAll();
                        selectionOptionGroup.clearSelection();
                        limparCampos(0);
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "Erro ao excluir os dados", "Erro", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }*/
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        tabela();
    }//GEN-LAST:event_jButton1ActionPerformed
    
    public void tabela(){
        //FormTabelaPets.genTabela().listagem();
        FormTabelaPets.genTabela().setVisible(true);
    }
    
    private void butLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butLimparActionPerformed
        limparCampos(1);
    }//GEN-LAST:event_butLimparActionPerformed

    private void butFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butFecharActionPerformed
        sair();
    }//GEN-LAST:event_butFecharActionPerformed

    private void txtfieldMarcaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtfieldMarcaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtfieldMarcaActionPerformed

    private void togButInserirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_togButInserirActionPerformed
        inserir(0);
    }//GEN-LAST:event_togButInserirActionPerformed

    //Sobrescrita
    public int inserir(int state){
        
        toUpperCase();
        hideAll();
        if(txtfieldMarca.getText().isBlank()||txtfieldModelo.getText().isBlank()||txtfieldChipset.getText().isBlank()){
            JOptionPane.showMessageDialog(null, "Campo(s) em branco", "Erro", JOptionPane.ERROR_MESSAGE);
            selectionOptionGroup.clearSelection();
            limparCampos(2);
            return 0;
        }
        else if(/*checkInfo()==*/true){
            JOptionPane.showMessageDialog(null, "Dados ja constam no banco de dados", "Erro", JOptionPane.ERROR_MESSAGE);
            selectionOptionGroup.clearSelection();
            limparCampos(2);
            return 0;
        }
        else{
            unhideInserir(true);
            if(state == 1){
                /*if(verifyNull()){
                    PlacaMae pm = new PlacaMae();
                    pm.setMarca(txtfieldMarca.getText());
                    pm.setModelo(txtfieldModelo.getText());
                    pm.setPotencia(Integer.parseInt(txtfieldPotencia.getText()));
                    pm.setChipset(txtfieldChipset.getText());
                    pm.setTypeSlotProc(txtfieldTypeSlotProc.getText());
                    pm.setTypeSlotMem(txtfieldTypeSlotMem.getText());
                    pm.setQtdSlotMem(Integer.parseInt(txtfieldQtdSlotMem.getText()));
                    pm.setMaxMem(Integer.parseInt(txtfieldMaxMem.getText()));
                    pm.setForma(txtfieldForma.getText());
                    for(M2Slot m2 : M2listConverter()){
                        pm.setM2SlotList(m2);
                    }
                    for(PCISlot pci : PCIlistConverter()){
                        pm.setPCISlotList(pci);
                    }
                    pm.setQtdSlotSata(Integer.parseInt(txtfieldQtdSlotSata.getText()));
                    
                    try{
                        bd().insrPlacaMae(pm);
                    }
                    catch(EmptyDataException ede){
                        ede.ErrorDescription();
                    }
                    catch(NegativeDataException ede){
                        ede.ErrorDescription();
                    }
                    if(bd().consPlacaMae(pm)!=null){
                        JOptionPane.showMessageDialog(null, "Dados inseridos com sucesso", "Sucesso", JOptionPane.PLAIN_MESSAGE);
                        limparCampos(0);
                        selectionOptionGroup.clearSelection();
                        hideAll();
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "Problema ao inserir", "Erro", JOptionPane.ERROR_MESSAGE);
                    }
                    
                } 
                else {
                    JOptionPane.showMessageDialog(null, "Não pode haver campos em branco", "Erro", JOptionPane.ERROR_MESSAGE);
                    return 0;
                }*/    
            }
            return 0;
        } 
    }
    
    private boolean verifyNull(){
        if(txtfieldMarca.getText().isBlank()) return false;
        if(txtfieldModelo.getText().isBlank()) return false;
        if(txtfieldChipset.getText().isBlank()) return false;
        if(txtfieldTypeSlotProc.getText().isBlank()) return false;
        if(txtfieldTypeSlotMem.getText().isBlank()) return false;
        try{
            if(Integer.parseInt(txtfieldQtdSlotMem.getText())<=0) return false;
        }
        catch(NumberFormatException nfe){
            JOptionPane.showMessageDialog(null, "Digite apenas Números", "Erro", JOptionPane.ERROR_MESSAGE);
            txtfieldQtdSlotMem.setText("");
            txtfieldQtdSlotMem.requestFocus();
            return false;
        }
        try{
            if(Integer.parseInt(txtfieldMaxMem.getText())<=0) return false;
        }
        catch(NumberFormatException nfe){
            JOptionPane.showMessageDialog(null, "Digite apenas Números", "Erro", JOptionPane.ERROR_MESSAGE);
            txtfieldMaxMem.setText("");
            txtfieldMaxMem.requestFocus();
            return false;
        }
        if(txtfieldForma.getText().isBlank()) return false;
        try{
            if(Integer.parseInt(txtfieldQtdSlotSata.getText())<=0) return false;
        }
        catch(NumberFormatException nfe){
            JOptionPane.showMessageDialog(null, "Digite apenas Números", "Erro", JOptionPane.ERROR_MESSAGE);
            txtfieldQtdSlotSata.setText("");
            txtfieldQtdSlotSata.requestFocus();
            return false;
        }
        return true;
        
    }
    
    
    
    
    private void butExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butExcluirActionPerformed
        excluir(1);
    }//GEN-LAST:event_butExcluirActionPerformed

    private void butAplicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butAplicarActionPerformed
        //alterar(1);
    }//GEN-LAST:event_butAplicarActionPerformed

    private void butInserirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butInserirActionPerformed
        inserir(1);
    }//GEN-LAST:event_butInserirActionPerformed

    private void togButConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_togButConsultarActionPerformed
        consultar();
    }//GEN-LAST:event_togButConsultarActionPerformed

    //Sobrescrita
    public void consultar(){
        hideAll();
        limparCampos(2);
        toUpperCase();
        if(txtfieldMarca.getText().isBlank()||txtfieldModelo.getText().isBlank()||txtfieldChipset.getText().isBlank()){
            limparCampos(2);
            JOptionPane.showMessageDialog(null, "Campo(s) em branco", "Erro", JOptionPane.ERROR_MESSAGE);
            selectionOptionGroup.clearSelection();
        }
        else if(/*checkInfo()==*/false){
            limparCampos(2);
            JOptionPane.showMessageDialog(null, "Dados não constam no banco de dados", "Erro", JOptionPane.ERROR_MESSAGE);
            selectionOptionGroup.clearSelection();
        }
        /*else{
            PlacaMae pm = new PlacaMae();
            pm.setMarca(txtfieldMarca.getText().toUpperCase());
            pm.setModelo(txtfieldModelo.getText().toUpperCase());
            pm.setChipset(txtfieldChipset.getText().toUpperCase());
            txtfieldPotencia.setText(""+bd().consPlacaMaeMarcaModeloChipset(pm).getPotencia());
            txtfieldTypeSlotProc.setText(""+bd().consPlacaMaeMarcaModeloChipset(pm).getTypeSlotProc());
            txtfieldQtdSlotMem.setText(""+bd().consPlacaMaeMarcaModeloChipset(pm).getQtdSlotMem());
            txtfieldTypeSlotMem.setText(""+bd().consPlacaMaeMarcaModeloChipset(pm).getTypeSlotMem());
            txtfieldMaxMem.setText(""+bd().consPlacaMaeMarcaModeloChipset(pm).getMaxMem());
            txtfieldQtdSlotSata.setText(""+bd().consPlacaMaeMarcaModeloChipset(pm).getQtdSlotSata());
            txtfieldForma.setText(""+bd().consPlacaMaeMarcaModeloChipset(pm).getForma());
            DefaultTableModel model = (DefaultTableModel)TabelaM2.getModel();
            painelTabs.setEnabled(true);
            for(M2Slot m2s : bd().consPlacaMaeMarcaModeloChipset(pm).getM2SlotList()){
                model.addRow(new Object[]{m2s.getType(),m2s.getGen(),m2s.getLines(),m2s.getSlotSize()});
            }
            model = (DefaultTableModel)TabelaPCI.getModel();
            for(int i = (model.getRowCount()) -1; i >=0; i--){
               model.removeRow(i); 
            }
            for(PCISlot pci : bd().consPlacaMaeMarcaModeloChipset(pm).getPCISlotList()){
                model.addRow(new Object[]{pci.getGen(),pci.getLines(),pci.getSlotSize()});
            }
        }*/
    }
    
    /*private boolean checkInfo(){
        PlacaMae pm = new PlacaMae();
        pm.setMarca(txtfieldMarca.getText());
        pm.setModelo(txtfieldModelo.getText());
        pm.setChipset(txtfieldChipset.getText());
        if(bd().consPlacaMaeMarcaModeloChipset(pm)==null){
            return false;
        }
        else{
            return true;
        }
    }*/
    
    /*private DBControl bd(){
        return DBControl.genDBControl();
    }*/
    
    private void toUpperCase(){
        txtfieldChipset.setText(txtfieldChipset.getText().toUpperCase());
        txtfieldMarca.setText(txtfieldMarca.getText().toUpperCase());
        txtfieldModelo.setText(txtfieldModelo.getText().toUpperCase());
        txtfieldTypeSlotProc.setText(txtfieldTypeSlotProc.getText().toUpperCase());
        txtfieldQtdSlotMem.setText(txtfieldQtdSlotMem.getText().toUpperCase());
        txtfieldTypeSlotMem.setText(txtfieldTypeSlotMem.getText().toUpperCase());
        txtfieldMaxMem.setText(txtfieldMaxMem.getText().toUpperCase());
        txtfieldPotencia.setText(txtfieldPotencia.getText().toUpperCase());
        txtfieldQtdSlotSata.setText(txtfieldQtdSlotSata.getText().toUpperCase());
        txtfieldForma.setText(txtfieldForma.getText().toUpperCase());
    }
    
    private void txtfieldTypeSlotProcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtfieldTypeSlotProcActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtfieldTypeSlotProcActionPerformed

    private void txtfieldQtdSlotMemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtfieldQtdSlotMemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtfieldQtdSlotMemActionPerformed

    private void txtfieldTypeSlotMemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtfieldTypeSlotMemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtfieldTypeSlotMemActionPerformed

    private void txtfieldMaxMemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtfieldMaxMemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtfieldMaxMemActionPerformed

    private void txtfieldPotenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtfieldPotenciaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtfieldPotenciaActionPerformed

    private void txtfieldChipsetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtfieldChipsetActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtfieldChipsetActionPerformed

    private void txtfieldFormaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtfieldFormaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtfieldFormaActionPerformed

    private void txtfieldQtdSlotSataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtfieldQtdSlotSataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtfieldQtdSlotSataActionPerformed
      
    //Sobrescrita e Sobrecarga
    public void limparCampos(int op){
        if(op==1 || op==0){
            txtfieldMarca.setText("");
            txtfieldModelo.setText("");
            txtfieldChipset.setText("");
            txtfieldTypeSlotProc.setText("");
            txtfieldQtdSlotMem.setText("");
            txtfieldTypeSlotMem.setText("");
            txtfieldMaxMem.setText("");
            txtfieldPotencia.setText("");
            txtfieldQtdSlotSata.setText("");
            txtfieldForma.setText("");
            txtfieldMarca.requestFocus();
        }
        if(op==2){
            txtfieldTypeSlotProc.setText("");
            txtfieldQtdSlotMem.setText("");
            txtfieldTypeSlotMem.setText("");
            txtfieldMaxMem.setText("");
            txtfieldPotencia.setText("");
            txtfieldQtdSlotSata.setText("");
            txtfieldForma.setText("");
            txtfieldMarca.requestFocus();
        }
        else{
            txtfieldMarca.setText("");
            txtfieldModelo.setText("");
            txtfieldChipset.setText("");
            txtfieldMarca.requestFocus();
        }
    }
    
    //Sobrecarga Sobrescrita
    public void limparCampos(){
        txtfieldMarca.setText("");
        txtfieldModelo.setText("");
        txtfieldChipset.setText("");
        txtfieldMarca.requestFocus();
    }
    
    public void sair(){ 
        limparCampos(0);
        dispose(); 
    }
    
    private void unhideInserir(boolean i){
        butInserir.setVisible(i);
        txtfieldTypeSlotProc.setEnabled(i);
        txtfieldQtdSlotMem.setEnabled(i);
        txtfieldTypeSlotMem.setEnabled(i);
        txtfieldMaxMem.setEnabled(i);
        txtfieldPotencia.setEnabled(i);
        txtfieldQtdSlotSata.setEnabled(i);
        txtfieldForma.setEnabled(i);

    }
    private void unhideExcluir(boolean i){
        butExcluir.setVisible(i);
        txtfieldTypeSlotProc.setEnabled(false);
        txtfieldQtdSlotMem.setEnabled(false);
        txtfieldTypeSlotMem.setEnabled(false);
        txtfieldMaxMem.setEnabled(false);
        txtfieldPotencia.setEnabled(false);
        txtfieldQtdSlotSata.setEnabled(false);
        txtfieldForma.setEnabled(false);
    }
    private void unhideAplicar(boolean i){
        butAplicar.setVisible(i);
        txtfieldTypeSlotProc.setEnabled(i);
        txtfieldQtdSlotMem.setEnabled(i);
        txtfieldTypeSlotMem.setEnabled(i);
        txtfieldMaxMem.setEnabled(i);
        txtfieldPotencia.setEnabled(i);
        txtfieldQtdSlotSata.setEnabled(i);
        txtfieldForma.setEnabled(i);
    }
    private void hideAll(){
        butAplicar.setVisible(false);
        butExcluir.setVisible(false);
        butInserir.setVisible(false);
        txtfieldTypeSlotProc.setEnabled(false);
        txtfieldQtdSlotMem.setEnabled(false);
        txtfieldTypeSlotMem.setEnabled(false);
        txtfieldMaxMem.setEnabled(false);
        txtfieldPotencia.setEnabled(false);
        txtfieldQtdSlotSata.setEnabled(false);
        txtfieldForma.setEnabled(false);   
    }
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormGerenciaPets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormGerenciaPets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormGerenciaPets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormGerenciaPets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormGerenciaPets().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butAplicar;
    private javax.swing.JButton butExcluir;
    private javax.swing.JButton butFechar;
    private javax.swing.JButton butInserir;
    private javax.swing.JButton butLimpar;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblChipset;
    private javax.swing.JLabel lblMarca;
    private javax.swing.JLabel lblMaxMem;
    private javax.swing.JLabel lblModelo;
    private javax.swing.JLabel lblPotencia;
    private javax.swing.JLabel lblQtdSlotMem;
    private javax.swing.JLabel lblQtdSlotSata;
    private javax.swing.JLabel lblTypeSlotMem;
    private javax.swing.JLabel lblTypeSlotProc;
    private javax.swing.JLabel lblTypeSlotProc1;
    private javax.swing.ButtonGroup selectionOptionGroup;
    private javax.swing.JToggleButton togButAlterar;
    private javax.swing.JToggleButton togButConsultar;
    private javax.swing.JToggleButton togButExcluir;
    private javax.swing.JToggleButton togButInserir;
    private javax.swing.JTextField txtfieldChipset;
    private javax.swing.JTextField txtfieldForma;
    private javax.swing.JTextField txtfieldMarca;
    private javax.swing.JTextField txtfieldMaxMem;
    private javax.swing.JTextField txtfieldModelo;
    private javax.swing.JTextField txtfieldPotencia;
    private javax.swing.JTextField txtfieldQtdSlotMem;
    private javax.swing.JTextField txtfieldQtdSlotSata;
    private javax.swing.JTextField txtfieldTypeSlotMem;
    private javax.swing.JTextField txtfieldTypeSlotProc;
    // End of variables declaration//GEN-END:variables
}
